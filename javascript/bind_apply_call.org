由于 js 里的 scope 是运行时确定的,所以在下面的代码中:
#+BEGIN_SRC js
   var myObj = {
          specialFunction: function () {

          },
         anotherSpecialFunction: function () {

          },
          getAsyncData: function (cb) {
              cb();
          },
          render: function () {
              var that = this;
              this.getAsyncData(function () {
                  that.specialFunction();
                  that.anotherSpecialFunction();
              });
          }
  };

  myObj.render();
#+END_SRC

如果将 that.specialFunction() 写为 this.specialFunction,就会报错.因为 this 在此时并没有指向的对象.
我们用 bind() 改写为:
#+BEGIN_SRC js
  render: function () {
      this.getAsyncData(function () {

          this.specialFunction();

          this.anotherSpecialFunction();

      }.bind(this));
  }
#+END_SRC

bind() 函数实际上返回了一个新的函数,这个函数用 this 作为 scope, 来执行函数

所以, bind 函数就实现了保存 context 的作用,不必再写
#+BEGIN_SRC js
    self = this
    //or
    that=this
#+END_SRC
之类的代码了.
而且,在参数为一个函数的时候,也不需要再写一个匿名函数,如
#+BEGIN_SRC js
    function(){
        this.somefunc()
    }

#+END_SRC

直接写成 this.somefunc.bind(this) 即可.

---
这是 bind 的工作原理:
    Function.prototype.bind = function (scope) {
        var fn = this;
        return function () {
            return fn.apply(scope);
        };
    }



  bind() 和 apply() 以及 call() 的区别:

- bind() 生成一个新的函数,绑定了 scope 和一定的参数
- apply() 和 call() 都是讲 scope 和参数传入,然后执行该函数
- apply() 的参数形式为 Array, 而call() 的参数行为为多个参数,在 es6中可以使用 ...矩阵扩展运算符来对矩阵展开

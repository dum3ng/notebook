** ListView
主要的两个属性是
#+BEGIN_SRC js
   <ListView
    dataSource={this.state.dataSource}
    renderRow={(rowData) => <Text>{rowData}</Text>}
  />
#+END_SRC
dataSource 是 ListView.DataSource类型,此类型初始化需要一个 rowHasChanged 属性来判断何时需要 row 发生了变化.
在 constructor() 里,
#+BEGIN_SRC js
  var ds = new ListView.DataSource({rowHasChanged:(row1,row2)=>row1!==row2})
    this.state={
      dataSource:ds.cloneWithRows([])
  }
#+END_SRC
另外,如果想要对 listView 里的 item设置 alignItems 和 justifyContent 来进行布局的话,需要在外面 wrap 一个额外的 view.

---
如果想使用 section 的话,就是:
#+BEGIN_SRC js
    var ds = new ListView.DataSource({rowHasChanged:(row1,row2)=>row1!==row2,
    sectionHeaderHasChanged:(s1,s2)=>s1!==s2})
    this.state={
      dataSource:ds.cloneWithRowsAndSections({})
  }
#+END_SRC

在赋给数据时,
#+BEGIN_SRC js
  ds.cloneWithRowsAndSections({
    components: array1,
    apis: array2,
  })
#+END_SRC
在 ListView里,
#+BEGIN_SRC js
  <ListView
      renderRow={}
      renderHeaderSection={(data,sectionName)=>{}}
#+END_SRC

** navigator

#+BEGIN_SRC js
  <Navigator
      initialRoute={}
      renderScene={this._renderScene.bind(this)}
      />

  // _renderScene
  _renderScene(route,navigator){
      switch(route.name){
          case 'sss':
          return <MyScene/>
      }
  }
#+END_SRC

Navigator 基本的参数为 initialRoute 和 renderScene
route 是一个包含所要存入 navigator 的 stack 里的数据的对象.
navigator 对象里有对 stack 进行操作的方法,基本的有 pop()和 push()

---
实际上根据 Navigator 的实现,我们有两种方法来做 navigation

 1. 利用 renderScene, 将 navigator 传给要入栈的每一个 scene, 然后在 scene 里自己实现 navigator.pop() 和 navigator.push() 的交互.
 2. 利用 Naviga 的 navigationBar 属性
#+BEGIN_SRC js
  navigationBar={
    <Navigator.NavigationBar
          routeMapper={NavigationBarRouteMapper}
          style={{backgroundColor:'white'}}
          />
      }
#+END_SRC
    这里面的 Navigator.NavigationBar 元件的 routeMapper 属性,是一个渲染顶部导航栏的函数
#+BEGIN_SRC js
  var NavigationBarRouteMapper = ()=>{
      LeftButton: (route, navigator, index, navState)=>{
          return <Text>left</Text>
      },
      RightButton:(route, navigator, index, navState)=>{
          return <Text>right</Text>
      },
      Title:(route, navigator, index, navState)=>{
       return (<Title/>)
      },
  }
#+END_SRC
    这个函数必须返回一个包含 LeftButton,RightButton,和 Title这3个属性的对象.这3个属性分别为返回要渲染对象的函数.

**
